import os
import requests
from PIL import Image
import io
import datetime
from openai import OpenAI
import time
import json 
class SyntheticData:
    def __init__(self, queries, metadata_dataframe, save_dir):
        self.queries = queries
        self.dataframe = metadata_dataframe
        self.save_dir = save_dir
        
    def fetch(self, provider):
        images = []
        for query in self.queries:
            images.append(provider.make_request(query))
        return images
            
    def download_image(self, image, save_dir): #Same as openverse
        image_id = image['id']
        image_url = image['url']
        filetype = "png"
        attribution = image['attribution']
        image_name = os.path.basename(image_id) + '.' + filetype
        image_path = os.path.join(save_dir, image_name)

        response = requests.get(image_url)
        if response.status_code == 200:
            if not os.path.exists(save_dir):
                os.makedirs(save_dir)
            try:
                with Image.open(io.BytesIO(response.content)) as img:
                    img = img.resize((224, 224), Image.Resampling.LANCZOS)
                    img.save(image_path, format=filetype.upper())
                metadata_dict = {
                    "id": image_id, 
                    "url": image_url, 
                    "attribution": attribution, 
                    "filepath": image_path, 
                    "timestamp": datetime.datetime.now().isoformat()
                }
                self.dataframe.insert(metadata_dict)
                self.dataframe.save()
            except IOError:
                print(f"Error processing the image from {image_url}")
        else:
            print(f"Failed to download {image_url}: {response.status_code}")
            
    
class OpenAIProvider:
    #Use batches instead
    def __init__(self, model_name):
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        self.model_name = model_name
    
    def make_request(self, query):
        response = self.client.images.generate(
            model=self.model_name,
            prompt=query,
            n=1,
            size="1024x1024"
            )   
        data = response.json()
        return self.get_metadata(data)
    
    def get_metadata(self, response):
        data = json.loads(response)
        url = data['data'][0]['url'] #assuming n=1, extend to multiple?
        id = str(int(time.time()) * 1000)
        attribution = f"This image was generated by {self.model_name}"
        
        return {"id":id, "url": url, "attribution": attribution}